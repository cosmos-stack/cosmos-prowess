<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CosmosStack.Extensions.Text</name>
    </assembly>
    <members>
        <member name="T:CosmosStack.Text.AdditionalStringExtensions">
            <summary>
            Additional <see cref="T:System.String" /> extensions. <br />
            额外的字符串扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsChinese(System.String)">
            <summary>
            Determine whether the specified text contains Chinese characters.<br />
            判断指定文本是否包含中文汉字。
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsNumber(System.String)">
            <summary>
            Determine whether the specified text contains numbers.<br />
            判断指定文本是否包含数字。
            </summary>
            <param name="text">文本</param>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsWholeWord(System.String,System.String)">
            <summary>
            Determine whether the specified text contains the given word. <br />
            This check will ignore the case.<br />
            判断指定文本是否包含给定的单词（word），此次检查将忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsAnyWholeWord(System.String,System.String[])">
            <summary>
            Determine whether the specified text contains any given word. <br />
            This check will ignore case. <br />
            判断指定文本是否包含给定的任意一个单词（word）。此次检查将忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsWholePhrase(System.String,System.String)">
            <summary>
            Determine whether the specified text completely contains a given phrase
            (a phrase can contain several words and non-letter content). <br />
            This check will ignore case.<br />
            判断指定文本是否完整包含给定的一个短语（短语可以包含若干个单词和非字母内容）。此次检查将忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsWholePhraseAny(System.String,System.String[])">
            <summary>
            Determine whether the specified text completely contains any given phrase
            (phrase can contain several words and non-letter content). <br />
            This check will ignore case. <br />
            判断指定文本是否完整包含给定的任意一个短语（短语可以包含若干个单词和非字母内容）。此次检查将忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsWholePhraseAll(System.String,System.String[])">
            <summary>
            Determine whether the specified text completely contains all the given phrases
            (phrases can contain several words and non-letter content). <br />
            This check will ignore case. <br />
            判断指定文本是否完整包含给定的所有短语（短语可以包含若干个单词和非字母内容）。此次检查将忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Determine whether the specified text contains the given text. <br />
            This check will ignore case.<br />
            判断指定文本是否包含给定的文本，此次检查将忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsAnyIgnoreCase(System.String,System.String[])">
            <summary>
            Determine whether the specified text contains any given text. <br />
            This check will ignore the case. <br />
            判断指定文本是否包含给定的任意一个文本，此次检查将忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsAllIgnoreCase(System.String,System.String[])">
            <summary>
            Determine whether the specified text contains all given texts. <br />
            This check will ignore the case. <br />
            判断指定文本是否包含给定的所有文本，此次检查将忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.ContainsOnlyThisChar(System.String,System.Char)">
            <summary>
            Determine whether there are only given characters in the specified text. <br />
            判断指定文本内是否只存在给定的字符。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.FindFirstPhrase(System.String,System.String[])">
            <summary>
            Find and retrieve the first phrase that meets the requirements from the specified text.<br />
            从指定文本中查找第一个满足要求的短语。
            </summary>
            <param name="text"></param>
            <param name="phrasesToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.FindFirstOccurrence(System.String,System.String[])">
            <summary>
            Find first occurrence
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.FindAndReplaceFirstOccurrence(System.String,System.String,System.String[])">
            <summary>
            Find and replace first occurrence
            </summary>
            <param name="text"></param>
            <param name="newValue"></param>
            <param name="oldValues"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.FindAndInsertBeforeFirstOccurrence(System.String,System.String,System.String[])">
            <summary>
            Find and insert before first occurrence
            </summary>
            <param name="text"></param>
            <param name="textInsert"></param>
            <param name="oldValues"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.JoinStringFor``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combine the given set with a specific string as the delimiter. <br />
            将给定的集合以特定的字符串为分隔符进行合并。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.Split(System.String,System.String)">
            <summary>
            Cut the string according to the given separator. <br />
            根据给定的分隔符号对字符串进行切割。
            </summary>
            <param name="that"></param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SplitInWords(System.String)">
            <summary>
            Split on all non-word characters,
            and returns an array of all the words.<br />
            拆分所有非单词字符，并返回所有单词的数组。
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SplitInWordsLongerThan(System.String,System.Int32)">
            <summary>
            Split on all non-word characters,
            and returns an array of all the words greater than the specified length.<br />
            拆分所有非单词字符，并返回所有大于指定长度的单词的数组。
            </summary>
            <param name="that"></param>
            <param name="lengthAtLeast"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SplitInLines(System.String)">
            <summary>
            Split text line by line.<br />
            逐行分割文本。
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SplitInLinesTyped``1(System.String)">
            <summary>
            Split the text line by line,
            and convert the resulting character array into instance data of the specified type. <br />
            逐行分割文本，
            并将分割所得的字符数组转换为指定类型的实例数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SplitInLinesWithoutEmpty(System.String)">
            <summary>
            Split the text line by line and remove blank lines.<br />
            逐行分割文本，并移除空行。
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SplitByIndex(System.String,System.Int32)">
            <summary>
            Split the specified text according to the given index position,
            and return the two parts of the characters obtained as a tuple. <br />
            将指定文本根据给定的索引位置进行分割，
            并将分割所得的两部分字符以元组形式返回。
            </summary>
            <param name="that"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SplitWordsByIndex(System.String,System.Int32)">
            <summary>
            The specified text is divided into words according to the given index position,
            and the two parts of characters obtained from the division are returned in the form of tuples. <br />
            将指定文本根据给定的索引位置按单词（word）进行分割，
            并将分割所得的两部分字符以元组形式返回。
            </summary>
            <param name="that"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SplitTyped``1(System.String,System.Char)">
            <summary>
            Split the specified text according to the given delimiter,
            and convert the resulting character array into instance data of the specified type. <br />
            将指定文本根据给定的分隔符进行分割，并将分割所得的字符数组转换为指定类型的实例数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="that"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SplitTyped``1(System.String,System.String)">
            <summary>
            Split the specified text according to the given delimiter,
            and convert the resulting character array into instance data of the specified type. <br />
            将指定文本根据给定的分隔符进行分割，并将分割所得的字符数组转换为指定类型的实例数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="that"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.TotalWords(System.String)">
            <summary>
            Count the total number of words. <br />
            统计总单词数。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.LastWord(System.String)">
            <summary>
            Get the last word from the given text.<br />
            从给定的本文中获得最后一个单词。
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.SecondWord(System.String)">
            <summary>
            Get the first word from the given text.<br />
            从给定的本文中获得第二个单词。
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.FirstWord(System.String)">
            <summary>
            Get the first word from the given text.<br />
            从给定的本文中获得第一个单词。
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.IndexOfWord(System.String,System.Int32)">
            <summary>
            Get the word at the specified position from the given text.<br />
            Find positive numbers from front to back,<br />
            and negative numbers from back to front.<br />
            从给定的本文中获得指定位置的单词。正数从前往后找，负数从后往前找。
            </summary>
            <param name="that"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.AdditionalStringExtensions.IsSameWord(System.String,System.String)">
            <summary>
            Determine that the specified text has exactly the same words as the given text. <br />
            Note that the order between words will be ignored. <br />
            判断指定的文本与给定的文本具有完全相同的单词。<br />
            注意，单词之间的顺序将被忽略。
            </summary>
            <param name="text"></param>
            <param name="check"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Text.CaseFormat">
            <summary>
            Case format<br />
            大小写格式化器
            </summary>
        </member>
        <member name="M:CosmosStack.Text.CaseFormat.To(CosmosStack.Text.CaseFormat.Style,System.String)">
            <summary>
            To<br />
            转换
            </summary>
            <param name="style"></param>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.CaseFormat.To(Humanizer.IStringTransformer,System.String,System.String)">
            <summary>
            To<br />
            转换
            </summary>
            <param name="transformer"></param>
            <param name="sequence"></param>
            <param name="joinOnStr"></param>
            <returns></returns>
        </member>
        <member name="P:CosmosStack.Text.CaseFormat.LowerHyphen">
            <summary>
            Create a <see cref="T:CosmosStack.Text.CaseFormat"/> instance with a hyphen splitter.
            </summary>
        </member>
        <member name="P:CosmosStack.Text.CaseFormat.LowerUnderscore">
            <summary>
            Create a <see cref="T:CosmosStack.Text.CaseFormat"/> instance with a lower underscore splitter.
            </summary>
        </member>
        <member name="P:CosmosStack.Text.CaseFormat.UpperUnderscore">
            <summary>
            Create a <see cref="T:CosmosStack.Text.CaseFormat"/> instance with a upper underscore splitter.
            </summary>
        </member>
        <member name="P:CosmosStack.Text.CaseFormat.Instance">
            <summary>
            Create a <see cref="T:CosmosStack.Text.CaseFormat"/> instance with a normal splitter.
            </summary>
        </member>
        <member name="P:CosmosStack.Text.CaseFormat.Humanizer">
            <summary>
            Create a <see cref="T:CosmosStack.Text.CaseFormat"/> instance in humanizer mode.
            </summary>
        </member>
        <member name="T:CosmosStack.Text.CaseFormat.Style">
            <summary>
            Case format style<be />
            大小写格式化样式
            </summary>
        </member>
        <member name="F:CosmosStack.Text.CaseFormat.Style.LOWER_CAMEL">
            <summary>
            Lower camel<br />
            小写与驼峰
            </summary>
        </member>
        <member name="F:CosmosStack.Text.CaseFormat.Style.LOWER_CAMEL_WITH_WHITESPACE">
            <summary>
            Lower camel with whitespace<br />
            小写与驼峰，并使用空格分隔
            </summary>
        </member>
        <member name="F:CosmosStack.Text.CaseFormat.Style.LOWER_HYPHEN">
            <summary>
            Lower hyphen<br />
            小写与横线
            </summary>
        </member>
        <member name="F:CosmosStack.Text.CaseFormat.Style.LOWER_UNDERSCORE">
            <summary>
            Lower underscore<br />
            小写与下划线
            </summary>
        </member>
        <member name="F:CosmosStack.Text.CaseFormat.Style.UPPER_CAMEL">
            <summary>
            Upper camel<br />
            大写与驼峰
            </summary>
        </member>
        <member name="F:CosmosStack.Text.CaseFormat.Style.UPPER_CAMEL_WITH_WHITESPACE">
            <summary>
            Upper camel with whitespace<br />
            大写与驼峰，并保留空格分隔
            </summary>
        </member>
        <member name="F:CosmosStack.Text.CaseFormat.Style.UPPER_UNDERSCORE">
            <summary>
            Upper underscore<br />
            大写与下划线
            </summary>
        </member>
        <member name="T:CosmosStack.Text.ConvertibleStringVal">
            <summary>
            The structure used for string parsing can more easily convert the string
            to the type specified by the user through the Cosmos.Conversions and XConv toolset. <br />
            用于字符串解析的结构体可以通过 Cosmos.Conversions 和 XConv 工具集更轻松地将字符串转换为用户指定的类型。
            </summary>
            <summary>
            The structure used for string parsing can more easily convert the string
            to the type specified by the user through the Cosmos.Conversions and XConv toolset. <br />
            用于字符串解析的结构体可以通过 Cosmos.Conversions 和 XConv 工具集更轻松地将字符串转换为用户指定的类型。
            </summary>
            <summary>
            The structure used for string parsing can more easily convert the string
            to the type specified by the user through the Cosmos.Conversions and XConv toolset. <br />
            用于字符串解析的结构体可以通过 Cosmos.Conversions 和 XConv 工具集更轻松地将字符串转换为用户指定的类型。
            </summary>
            <summary>
            The structure used for string parsing can more easily convert the string
            to the type specified by the user through the Cosmos.Conversions and XConv toolset. <br />
            用于字符串解析的结构体可以通过 Cosmos.Conversions 和 XConv 工具集更轻松地将字符串转换为用户指定的类型。
            </summary>
            <summary>
            The structure used for string parsing can more easily convert the string
            to the type specified by the user through the Cosmos.Conversions and XConv toolset. <br />
            用于字符串解析的结构体可以通过 Cosmos.Conversions 和 XConv 工具集更轻松地将字符串转换为用户指定的类型。
            </summary>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#GetTypeCode">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToByte(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToChar(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToDouble(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToInt16(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToInt32(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToInt64(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToSByte(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToSingle(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToString(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Of``1(``0)">
            <summary>
            Create a new <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> with a specified object. <br />
            使用指定的对象创建一个新的 <see cref="T:CosmosStack.Text.ConvertibleStringVal"/>。
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Of(System.String)">
            <summary>
            Create a new <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> with a specified string. <br />
            使用指定的字符串创建一个新的 <see cref="T:CosmosStack.Text.ConvertibleStringVal"/>。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.As``1">
            <summary>
            Convert <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> to the given type <br />
            将 ConvertibleStringVal 转换为给定的类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.As``1(``0)">
            <summary>
            Convert <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> to the given type <br />
            将 ConvertibleStringVal 转换为给定的类型
            </summary>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.As``1(CosmosStack.Conversions.CastingContext,``0)">
            <summary>
            Convert <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> to the given type <br />
            将 ConvertibleStringVal 转换为给定的类型
            </summary>
            <param name="context"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.As``1(System.IFormatProvider)">
            <summary>
            Convert <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> to the given type <br />
            将 ConvertibleStringVal 转换为给定的类型
            </summary>
            <param name="formatProvider"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.As``1(System.Globalization.NumberStyles,``0)">
            <summary>
            Convert <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> to the given type <br />
            将 ConvertibleStringVal 转换为给定的类型
            </summary>
            <param name="numberStyles"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.As``1(System.Globalization.DateTimeStyles,``0)">
            <summary>
            Convert <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> to the given type <br />
            将 ConvertibleStringVal 转换为给定的类型
            </summary>
            <param name="dateTimeStyles"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.As``1(CosmosStack.Text.IgnoreCase,``0,System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Convert <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> to the given type <br />
            将 ConvertibleStringVal 转换为给定的类型
            </summary>
            <param name="ignoreCase"></param>
            <param name="defaultVal"></param>
            <param name="format"></param>
            <param name="numberStyles"></param>
            <param name="dateTimeStyles"></param>
            <param name="formatProvider"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Is``1">
            <summary>
            Determine whether <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> can be converted to a given type <br />
            判断 ConvertibleStringVal 是否可转换为给定的类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Is``1(System.IFormatProvider)">
            <summary>
            Determine whether <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> can be converted to a given type <br />
            判断 ConvertibleStringVal 是否可转换为给定的类型
            </summary>
            <param name="provider"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Is``1(System.Globalization.NumberStyles)">
            <summary>
            Determine whether <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> can be converted to a given type <br />
            判断 ConvertibleStringVal 是否可转换为给定的类型
            </summary>
            <param name="numberStyles"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Is``1(System.Globalization.DateTimeStyles)">
            <summary>
            Determine whether <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> can be converted to a given type <br />
            判断 ConvertibleStringVal 是否可转换为给定的类型
            </summary>
            <param name="dateTimeStyles"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Is``1(CosmosStack.Text.IgnoreCase,System.Action{``0},System.String,System.Nullable{System.Globalization.NumberStyles},System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider)">
            <summary>
            Determine whether <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> can be converted to a given type <br />
            判断 ConvertibleStringVal 是否可转换为给定的类型
            </summary>
            <param name="ignoreCase"></param>
            <param name="action"></param>
            <param name="format"></param>
            <param name="numberStyle"></param>
            <param name="dateTimeStyle"></param>
            <param name="formatProvider"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Is``1(``0@)">
            <summary>
            Determine whether <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> can be converted to a given type <br />
            判断 ConvertibleStringVal 是否可转换为给定的类型
            </summary>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Is``1(System.IFormatProvider,``0@)">
            <summary>
            Determine whether <see cref="T:CosmosStack.Text.ConvertibleStringVal"/> can be converted to a given type <br />
            判断 ConvertibleStringVal 是否可转换为给定的类型
            </summary>
            <param name="provider"></param>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Equals(CosmosStack.Text.ConvertibleStringVal,System.StringComparison)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Equals(CosmosStack.Text.ConvertibleStringVal)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Equals(System.String,System.StringComparison)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Equals(System.String)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.ToString">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.ValueStringMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.AsOptionals``1">
            <summary>
            Maybe
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.AsOptionals``1(System.Func{``0,System.Boolean})">
            <summary>
            Maybe
            </summary>
            <param name="condition"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.AsOptionals``1(``0)">
            <summary>
            Maybe
            </summary>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.AsOptionals``1(System.Func{``0,System.Boolean},``0)">
            <summary>
            Maybe
            </summary>
            <param name="condition"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.MaybeValue``1">
            <summary>
            Maybe value
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.MaybeValue``1(System.Func{``0,System.Boolean})">
            <summary>
            Maybe value
            </summary>
            <param name="condition"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.MaybeValue``1(``0)">
            <summary>
            Maybe value
            </summary>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringVal.MaybeValue``1(System.Func{``0,System.Boolean},``0)">
            <summary>
            Maybe value
            </summary>
            <param name="condition"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Text.ConvertibleStringVal.Parser">
            <summary>
            Internal value string parser
            </summary>
        </member>
        <member name="T:CosmosStack.Text.ConvertibleStringValExtensions">
            <summary>
            Cosmos ConvertibleStringVal extensions <br />
            可转换性字符串值扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringValExtensions.TryGetValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,CosmosStack.Text.ConvertibleStringVal},``0,``1@)">
            <summary>
            Try get value from dictionary <br />
            尝试从字典中获得值
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringValExtensions.TryGetValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,CosmosStack.Text.ConvertibleStringVal},``0,System.IFormatProvider,``1@)">
            <summary>
            Try get value from dictionary <br />
            尝试从字典中获得值
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringValExtensions.Add``2(System.Collections.Generic.IDictionary{``0,CosmosStack.Text.ConvertibleStringVal},``0,``1)">
            <summary>
            Add <br />
            添加
            </summary>
            <param name="target"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Text.ConvertibleStringValExtensions.Set``2(System.Collections.Generic.IDictionary{``0,CosmosStack.Text.ConvertibleStringVal},``0,``1)">
            <summary>
            Set <br />
            设置
            </summary>
            <param name="target"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:CosmosStack.Text.EncodingServices.EncodingExtensions">
            <summary>
            Encoding Extensions <br />
            Encoding 扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Text.EncodingServices.EncodingExtensions.GetSafeString(System.Text.Encoding,System.Byte[])">
            <summary>
            Get the string safely <br />
            安全地获取字符串
            </summary>
            <param name="encoding"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.EncodingServices.EncodingExtensions.GetSafeString(System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get the string safely <br />
            安全地获取字符串
            </summary>
            <param name="encoding"></param>
            <param name="bytes"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Text.RegexUtils.RegexCache">
            <summary>
            Regex cache <br />
            正则缓存
            </summary>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexCache.Key.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexCache.Get(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Gets the already cached value for a key, or calculates the value and stores it. <br />
            获取已缓存的键值，或计算该值并存储它。
            </summary>
            <param name="pattern">The pattern used to create the regular expression.</param>
            <param name="options">The options for regex.</param>
            <returns>The calculated or cached value.</returns>
        </member>
        <member name="T:CosmosStack.Text.RegexUtils.Regexs">
            <summary>
            Regex Utilities<br />
            表达式工具集
            </summary>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.Regexs.IsMatch(System.String,System.String)">
            <summary>
            Verify that the input matches the pattern <br />
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.Regexs.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Verify that the input matches the pattern <br />
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件,比如是否忽略大小写</param>
        </member>
        <member name="T:CosmosStack.Text.RegexUtils.RegexTypes">
            <summary>
            This class is used to fake an enum. You'll be able to use it as an enum. <br />
            此类用于伪造枚举。 您将能够将其用作枚举。
            <para>
            Note: type save enum, found on stackoverflow: http://stackoverflow.com/a/424414/603309
            </para>
            </summary>
        </member>
        <member name="P:CosmosStack.Text.RegexUtils.RegexTypes.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:CosmosStack.Text.RegexUtils.RegexTypes.Value">
            <summary>
            Values
            </summary>
        </member>
        <member name="F:CosmosStack.Text.RegexUtils.RegexTypes.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="F:CosmosStack.Text.RegexUtils.RegexTypes.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="T:CosmosStack.Text.RegexUtils.RegexVerbalExpressions">
            <summary>
            Regex verbal expressions <br />
            正则表达式
            </summary>
        </member>
        <member name="P:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.DefaultExpression">
            <summary>
            Returns a default instance of RegexVerbalExpressions
            having the Multiline option enabled <br />
            返回启用了多行选项的 RegexVerbalExpressions 的默认实例
            </summary>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Add(CosmosStack.Text.RegexUtils.RegexTypes)">
            <summary>
            Add
            </summary>
            <param name="regexTypes"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Add(System.String,System.Boolean)">
            <summary>
            Add
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.StartOfLine(System.Boolean)">
            <summary>
            Start of line
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.EndOfLine(System.Boolean)">
            <summary>
            End of line
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Then(System.String,System.Boolean)">
            <summary>
            Then
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Then(CosmosStack.Text.RegexUtils.RegexTypes)">
            <summary>
            Then
            </summary>
            <param name="regexTypes"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Find(System.String)">
            <summary>
            Find
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Maybe(System.String,System.Boolean)">
            <summary>
            Maybe
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Maybe(CosmosStack.Text.RegexUtils.RegexTypes)">
            <summary>
            Maybe
            </summary>
            <param name="regexTypes"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Anything">
            <summary>
            Anything
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.AnythingBut(System.String,System.Boolean)">
            <summary>
            Anything but...
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Something">
            <summary>
            Something
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.SomethingBut(System.String,System.Boolean)">
            <summary>
            Something but...
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Replace(System.String)">
            <summary>
            Replace
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.LineBreak">
            <summary>
            Line break
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Br">
            <summary>
            Br
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Tab">
            <summary>
            Tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Word">
            <summary>
            Word
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.AnyOf(System.String,System.Boolean)">
            <summary>
            Any of
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Any(System.String)">
            <summary>
            Any
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Range(System.Object[])">
            <summary>
            Range
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Multiple(System.String,System.Boolean)">
            <summary>
            Multiple
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Or(CosmosStack.Text.RegexUtils.RegexTypes)">
            <summary>
            Or
            </summary>
            <param name="regexTypes"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Or(System.String,System.Boolean)">
            <summary>
            Or
            </summary>
            <param name="value"></param>
            <param name="sanitize"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.BeginCapture">
            <summary>
            Begin capture
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.BeginCapture(System.String)">
            <summary>
            Begin capture
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.EndCapture">
            <summary>
            End capture
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.RepeatPrevious(System.Int32)">
            <summary>
            Repeat previous
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.RepeatPrevious(System.Int32,System.Int32)">
            <summary>
            Repeat previous
            </summary>
            <param name="n"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.AddModifier(System.Char)">
            <summary>
            Add modifier
            </summary>
            <param name="modifier"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.RemoveModifier(System.Char)">
            <summary>
            Remove modifier
            </summary>
            <param name="modifier"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.WithAnyCase(System.Boolean)">
            <summary>
            With any case
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.UseOneLineSearchOption(System.Boolean)">
            <summary>
            Use one lne search option
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.WithOptions(System.Text.RegularExpressions.RegexOptions)">
            <summary>
            With options
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Sanitize(System.String)">
            <summary>
            Sanitize
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Test(System.String)">
            <summary>
            Test
            </summary>
            <param name="toTest"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.IsMatch(System.String)">
            <summary>
            Is match
            </summary>
            <param name="toTest"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.ToRegex">
            <summary>
            To regex
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.ToString">
            <summary>
            To string
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.RegexUtils.RegexVerbalExpressions.Capture(System.String,System.String)">
            <summary>
            Capture
            </summary>
            <param name="toTest"></param>
            <param name="groupName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
